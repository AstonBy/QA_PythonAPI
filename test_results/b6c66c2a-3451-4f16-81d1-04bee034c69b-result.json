{"name": "test_user_auth", "status": "failed", "statusDetails": {"message": "AssertionError: Response JSON doesn't have key user_email", "trace": "self = <connect.test_user_auth.TestUserAuth object at 0x00000209C3BB64A0>\n\n    @allure.description(\"Sign-up a new user\")\n    def test_user_auth(self):\n        # Getting Employer_ID fields\n        response_group_access_field = ConnectRequests._send(\"GET\", \"v1/users/group-access-field/\")   # Getting Employer_ID fields\n    \n        Assertions.assert_status_code(response_group_access_field, 200)\n        Assertions.assert_json_has_key(response_group_access_field, 'is_signup_access_key')\n    \n        # Entering the access code (Employer ID) and getting the group_id query param\n        account_number = '123456789'\n        response_group_fields_request = ConnectRequests._send(\"GET\", f\"v1/users/group-fields-request/?account_number={account_number}\")\n    \n        Assertions.assert_status_code(response_group_fields_request, 200)\n        Assertions.assert_json_has_key(response_group_fields_request, 'group_id')\n    \n        group_id = self.get_json_value(response_group_fields_request, \"group_id\")\n    \n        data = {\n            \"connect_form_data\": {\n                     'person_type': 'Employee',\n                     'first_name': 'Ast',\n                     'last_name': 'Metest',\n                     'gender': 'Male',\n                     'date_of_birth': '2000-01-09'},\n            \"form_data\": {}\n        }\n    \n        # Intermediate step (group validation) and getting the 'ceu' cookie\n        response_group_validate = ConnectRequests._send(\"POST\",\n            f\"v1/users/group-validate/?group_id={group_id}\",\n            json=data)\n    \n        # with allure.step(f\"{method} request to URL '{url}'\"):\n        #     response_group_validate = requests.request(\"POST\", url_full, json=json)\n    \n        Assertions.assert_status_code(response_group_validate, 200)\n    \n        ceu = self.get_cookie(response_group_validate, \"ceu\")\n    \n        # User Sign-up\n        email_for_registration = self.prepare_reg_email()\n        response_register = ConnectRequests._send(\"POST\", \"v1/users/register/\",\n                                  json=email_for_registration,\n                                  cookies={\n                                      \"ceu\": ceu\n                                  }\n                                  )\n        Assertions.assert_status_code(response_register, 200)\n        Assertions.assert_json_has_key(response_register, \"access_token\")\n        access_token = self.get_json_value(response_register, \"access_token\")   # ???\n    \n        ses_cookie = self.get_cookie(response_register, \"ses\")\n    \n        # Getting a new user data\n        response_users_me = ConnectRequests._send(\"GET\", \"v1/users/me/\", cookies={\"ses\": ses_cookie})\n    \n        Assertions.assert_status_code(response_users_me, 200)\n        Assertions.assert_json_has_keys(response_users_me,\n                                        names=[\n                                            \"id\",\n                                            \"first_name\",\n                                            \"last_name\",\n                                            \"email\",\n                                            \"date_of_birth\",\n                                            \"gender\",\n                                            \"phone\",\n                                            \"zip_code\",\n                                            \"partner_user_id\",\n                                            \"username\",\n                                            \"person_type\",\n                                            \"receive_emails\",\n                                            \"wcag_hight_contrast\",\n                                            \"wcag_audio_inform\",\n                                            \"wcag_disable_animation\",\n                                            \"assessment_complite\"\n                                        ])\n    \n>       Assertions.assert_json_value_by_name(response_users_me, 'user_email', email_for_registration, \"User's email is not equal to the registration email\")\n\nconnect\\test_user_auth.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, name = 'user_email', expected_value = {'email': 'shkorkin+qa0601122023164753@alarstudios.com', 'password': '1234qwertY!', 'username': 'Ast'}\nerror_message = \"User's email is not equal to the registration email\"\n\n    @staticmethod\n    def assert_json_value_by_name(response: Response, name, expected_value, error_message):\n        try:\n            response_as_dict = response.json()\n        except json.JSONDecodeError:\n            assert False, f\"Response is not in JSON format. Response text is {response.text}\"\n    \n>       assert name in response_as_dict, f\"Response JSON doesn't have key {name}\"\nE       AssertionError: Response JSON doesn't have key user_email\n\nlibconnect\\assertions.py:19: AssertionError"}, "description": "Sign-up a new user", "steps": [{"name": "GET request to URL 'https://qa06-connect.stage-twill.health/api/v1/users/group-access-field/'", "status": "passed", "start": 1673538472073, "stop": 1673538472628}, {"name": "GET request to URL 'https://qa06-connect.stage-twill.health/api/v1/users/group-fields-request/?account_number=123456789'", "status": "passed", "start": 1673538472628, "stop": 1673538473014}, {"name": "POST request to URL 'https://qa06-connect.stage-twill.health/api/v1/users/group-validate/?group_id=4'", "status": "passed", "start": 1673538473014, "stop": 1673538473315}, {"name": "POST request to URL 'https://qa06-connect.stage-twill.health/api/v1/users/register/'", "status": "passed", "start": 1673538473315, "stop": 1673538474434}, {"name": "GET request to URL 'https://qa06-connect.stage-twill.health/api/v1/users/me/'", "status": "passed", "start": 1673538474434, "stop": 1673538474682}], "start": 1673538472073, "stop": 1673538474682, "uuid": "df399ab2-b14e-4bc2-bd99-18113dc61eb9", "historyId": "4508fdcbd613d6c47d5b55f502afd05e", "testCaseId": "12f44b9ab4fb241e61f643a23e25f47d", "fullName": "connect.test_user_auth.TestUserAuth#test_user_auth", "labels": [{"name": "epic", "value": "Authorization cases"}, {"name": "parentSuite", "value": "connect"}, {"name": "suite", "value": "test_user_auth"}, {"name": "subSuite", "value": "TestUserAuth"}, {"name": "host", "value": "DESKTOP-L0KFRAS"}, {"name": "thread", "value": "12752-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "connect.test_user_auth"}]}