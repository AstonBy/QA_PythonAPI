{"name": "test_happiness_assessment", "status": "failed", "statusDetails": {"message": "AssertionError: Response is not JSON format. Response text is <!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"/><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"/><meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"/><meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline' 'unsafe-eval' *.happify.com *.vimeo.com *.google.com *.googleapis.com *.youtube.com *.mixpanel.com *.twitter.com tiktok.com *.tiktok.com *.opentok.com *.tokbox.com *.ibytedtos.com *.tiktokcdn.com instagram.com *.instagram.com; img-src 'self' data: https:; media-src 'self' https:; connect-src 'self' http://127.0.0.1:8001 ws://127.0.0.1:8001 *.stage-twill.health *.twill.health *.yourcoach.health *.hcod.yourcoach.health *.tokbox.com *.opentok.com wss://*.tokbox.com wss://*.opentok.com *.s3.amazonaws.com *.happify.com api-js.mixpanel.com *.ibytedtos.com *.facebook.com wss://*.hcod.yourcoach.health; frame-src 'self' *.happify.com www.youtube.com *.vimeo.com embed.ted.com player.youku.com *.twitter.com instagram.com *.instagram.com tiktok.com *.tiktok.com *.facebook.com; style-src 'self' 'unsafe-inline' *.happify.com fonts.googleapis.com *.tiktokcdn.com; font-src 'self' *.happify.com fonts.gstatic.com data:; default-src 'self' *.happify.com;\"/><style>@font-face {\n        font-family: \"GT Walsheim\";\n        font-style: normal;\n        font-weight: 300;\n        src: url(\"https://assets.happify.com/fonts/GTWalsheimPro-Light.woff2\")\n          format(\"woff2\");\n      }\n      @font-face {\n        font-family: \"GT Walsheim\";\n        font-style: normal;\n        font-weight: 400;\n        src: url(\"https://assets.happify.com/fonts/GTWalsheimPro-Regular.woff2\")\n          format(\"woff2\");\n      }\n      @font-face {\n        font-family: \"GT Walsheim\";\n        font-style: normal;\n        font-weight: 600;\n        src: url(\"https://assets.happify.com/fonts/GTWalsheimPro-Medium.woff2\")\n          format(\"woff2\");\n      }\n      @font-face {\n        font-family: \"GT Walsheim\";\n        font-style: normal;\n        font-weight: 700;\n        src: url(\"https://assets.happify.com/fonts/GTWalsheimPro-Bold.woff2\")\n          format(\"woff2\");\n      }</style><title></title><link href=\"/styles/main.5b3d402c278e84a2d921.css\" rel=\"stylesheet\"></head><body><script src=\"/js/main.99fc84287abdea307639.js\"></script></body></html>", "trace": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"/><meta name=\"viewport\" content=\"width=device-width,initial...278e84a2d921.css\" rel=\"stylesheet\"></head><body><script src=\"/js/main.99fc84287abdea307639.js\"></script></body></html>'\ncls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\__init__.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000266DC337220>\ns = '<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"/><meta name=\"viewport\" content=\"width=device-width,initial...278e84a2d921.css\" rel=\"stylesheet\"></head><body><script src=\"/js/main.99fc84287abdea307639.js\"></script></body></html>'\n_w = <built-in method match of re.Pattern object at 0x00000266DC1FB850>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000266DC337220>\ns = '<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"/><meta name=\"viewport\" content=\"width=device-width,initial...278e84a2d921.css\" rel=\"stylesheet\"></head><body><script src=\"/js/main.99fc84287abdea307639.js\"></script></body></html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <connect.test_happiness_assessment.TestAssessments object at 0x00000266DE5470A0>, response = <Response [200]>, name = 'client_id'\n\n    def get_json_value(self, response: Response, name):\n        try:\n>           response_as_dict = response.json()\n\nlibconnect\\base_case.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\models.py:975: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <connect.test_happiness_assessment.TestAssessments object at 0x00000266DE5470A0>\n\n    def test_happiness_assessment(self):\n        # GETTING CLIENT_ID FOR THE ENV\n>       client_id_response = self.get_login_cookie(\"https://qa06-connect.stage-twill.health\")\n\nconnect\\test_happiness_assessment.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlibconnect\\base_case.py:43: in get_login_cookie\n    client_id = self.get_json_value(response123, \"client_id\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <connect.test_happiness_assessment.TestAssessments object at 0x00000266DE5470A0>, response = <Response [200]>, name = 'client_id'\n\n    def get_json_value(self, response: Response, name):\n        try:\n            response_as_dict = response.json()\n        except json.decoder.JSONDecodeError:\n>           assert False, f'Response is not JSON format. Response text is {response.text}'\nE           AssertionError: Response is not JSON format. Response text is <!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"/><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"/><meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"/><meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline' 'unsafe-eval' *.happify.com *.vimeo.com *.google.com *.googleapis.com *.youtube.com *.mixpanel.com *.twitter.com tiktok.com *.tiktok.com *.opentok.com *.tokbox.com *.ibytedtos.com *.tiktokcdn.com instagram.com *.instagram.com; img-src 'self' data: https:; media-src 'self' https:; connect-src 'self' http://127.0.0.1:8001 ws://127.0.0.1:8001 *.stage-twill.health *.twill.health *.yourcoach.health *.hcod.yourcoach.health *.tokbox.com *.opentok.com wss://*.tokbox.com wss://*.opentok.com *.s3.amazonaws.com *.happify.com api-js.mixpanel.com *.ibytedtos.com *.facebook.com wss://*.hcod.yourcoach.health; frame-src 'self' *.happify.com www.youtube.com *.vimeo.com embed.ted.com player.youku.com *.twitter.com instagram.com *.instagram.com tiktok.com *.tiktok.com *.facebook.com; style-src 'self' 'unsafe-inline' *.happify.com fonts.googleapis.com *.tiktokcdn.com; font-src 'self' *.happify.com fonts.gstatic.com data:; default-src 'self' *.happify.com;\"/><style>@font-face {\nE                   font-family: \"GT Walsheim\";\nE                   font-style: normal;\nE                   font-weight: 300;\nE                   src: url(\"https://assets.happify.com/fonts/GTWalsheimPro-Light.woff2\")\nE                     format(\"woff2\");\nE                 }\nE                 @font-face {\nE                   font-family: \"GT Walsheim\";\nE                   font-style: normal;\nE                   font-weight: 400;\nE                   src: url(\"https://assets.happify.com/fonts/GTWalsheimPro-Regular.woff2\")\nE                     format(\"woff2\");\nE                 }\nE                 @font-face {\nE                   font-family: \"GT Walsheim\";\nE                   font-style: normal;\nE                   font-weight: 600;\nE                   src: url(\"https://assets.happify.com/fonts/GTWalsheimPro-Medium.woff2\")\nE                     format(\"woff2\");\nE                 }\nE                 @font-face {\nE                   font-family: \"GT Walsheim\";\nE                   font-style: normal;\nE                   font-weight: 700;\nE                   src: url(\"https://assets.happify.com/fonts/GTWalsheimPro-Bold.woff2\")\nE                     format(\"woff2\");\nE                 }</style><title></title><link href=\"/styles/main.5b3d402c278e84a2d921.css\" rel=\"stylesheet\"></head><body><script src=\"/js/main.99fc84287abdea307639.js\"></script></body></html>\n\nlibconnect\\base_case.py:23: AssertionError"}, "start": 1674212003239, "stop": 1674212003470, "uuid": "d0bca957-093e-4d0b-a1cc-aff36d2e480a", "historyId": "3a40c18f8e1447fa9f279e3d3b028b1d", "testCaseId": "842ac35725f737ec40747a95ed0210dc", "fullName": "connect.test_happiness_assessment.TestAssessments#test_happiness_assessment", "labels": [{"name": "parentSuite", "value": "connect"}, {"name": "suite", "value": "test_happiness_assessment"}, {"name": "subSuite", "value": "TestAssessments"}, {"name": "host", "value": "DESKTOP-L0KFRAS"}, {"name": "thread", "value": "14720-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "connect.test_happiness_assessment"}]}